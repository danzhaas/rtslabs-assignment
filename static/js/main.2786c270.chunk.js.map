{"version":3,"sources":["features/search/HistorySlice.js","features/search/SearchBar.js","features/search/ResultsList.js","features/search/SearchPage.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["historySlice","createSlice","name","initialState","value","reducers","addSearch","state","action","unshift","payload","actions","SearchBar","updateResult","dispatch","useDispatch","e","a","preventDefault","queryInput","document","querySelector","axios","get","res","data","hits","id","type","placeholder","onClick","submitSearch","Result","result","url","title","objectId","href","ResultsList","searchResult","length","map","SearchPage","useState","App","className","configureStore","reducer","history","historyReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAEaA,EAAeC,YAAY,CACpCC,KAAM,UACNC,aAAc,CACVC,MAAM,IAEVC,SAAU,CACNC,UAAW,SAACC,EAAOC,GACfD,EAAMH,MAAMK,QAASD,EAAOE,aAKzBJ,EAAcN,EAAaW,QAA3BL,UAIAN,IAAf,Q,wBCZe,SAASY,EAAT,GAEX,IADAC,EACD,EADCA,aAEMC,EAAWC,cADlB,4CAGC,WAA6BC,GAA7B,iBAAAC,EAAA,6DACID,EAAEE,iBACIC,EAAaC,SAASC,cAAc,eAAejB,MAF7D,SAGsBkB,IAAMC,IAAN,oDAAuDJ,IAH7E,OAGUK,EAHV,OAIIX,EAAaW,EAAIC,KAAKC,MACtBZ,EAASR,EAAUa,IALvB,4CAHD,sBAWC,OACI,uBAAMQ,GAAG,YAAT,UACI,uBAAOC,KAAK,OAAOD,GAAG,aAAazB,KAAK,aAAa2B,YAAY,WACjE,uBAAOD,KAAK,SAASxB,MAAM,SAAS0B,QAAU,SAACd,GAAD,OAdvD,2CAc8De,CAAaf,SCpB9E,SAASgB,EAAT,GAAuD,IAAD,IAApCC,OAAUC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACpC,OACI,qBAAKT,GAAG,SAAR,SACI,mBAAGU,KAAMH,EAAT,SACI,iCAASC,OAFKC,GAQf,SAASE,EAAT,GAEX,IADAC,EACD,EADCA,aAEA,OACI,qBAAKZ,GAAG,cAAR,SACMY,EAAaC,OAAS,EAAID,EAAaE,KAAI,SAAAR,GAAM,OAAI,cAACD,EAAD,CAAQC,OAAQA,OAAe,KCbnF,SAASS,IAAc,IAAD,EACMC,mBAAS,IADf,mBACzBJ,EADyB,KACX1B,EADW,KAGjC,OACI,gCACI,mCACI,qBAAKc,GAAG,QAAR,SACI,kEAEJ,cAACf,EAAD,CACIC,aAAcA,OAGtB,cAACyB,EAAD,CACIC,aAAcA,O,MCNfK,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACH,EAAD,OCJSI,cAAe,CAC5BC,QAAS,CACPC,QAASC,KCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJtC,SAASuC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2786c270.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const historySlice = createSlice({\r\n    name: 'history',\r\n    initialState: {\r\n        value:[],\r\n    },\r\n    reducers: {\r\n        addSearch: (state, action) => {\r\n            state.value.unshift( action.payload );\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addSearch } = historySlice.actions;\r\n\r\nexport const selectHistory = state => state.history.value;\r\n\r\nexport default historySlice.reducer;","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { addSearch } from './HistorySlice';\r\nimport axios from 'axios'\r\n\r\n\r\nexport default function SearchBar({ \r\n    updateResult \r\n}) {\r\n    const dispatch = useDispatch();\r\n\r\n    async function submitSearch (e) {\r\n        e.preventDefault();\r\n        const queryInput = document.querySelector('#queryInput').value;\r\n        const res = await axios.get(`http://hn.algolia.com/api/v1/search?query=${queryInput}`);\r\n        updateResult(res.data.hits);\r\n        dispatch(addSearch(queryInput));\r\n    }\r\n\r\n    return (\r\n        <form id=\"searchbar\">\r\n            <input type=\"text\" id=\"queryInput\" name=\"queryInput\" placeholder=\"Search\" ></input>\r\n            <input type=\"submit\" value=\"Submit\" onClick={ (e) => submitSearch(e) } ></input>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Result({ result: { url, title, objectId } }) {\r\n    return(\r\n        <div id=\"result\" key={objectId}>\r\n            <a href={url} >\r\n                <strong>{title}</strong>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function ResultsList({ \r\n    searchResult, \r\n}) {\r\n    return (\r\n        <div id=\"resultsList\">\r\n            { searchResult.length > 0 ? searchResult.map(result => <Result result={result} /> ) : \"\" }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport ResultsList from './ResultsList';\r\n\r\nexport default function SearchPage() {\r\n    const [ searchResult, updateResult ] = useState(\"\");\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <div id=\"brand\">\r\n                    <i>Dan's HackerNews Algolia Search</i>\r\n                </div>\r\n                <SearchBar \r\n                    updateResult={updateResult} \r\n                />\r\n            </header>\r\n            <ResultsList \r\n                searchResult={searchResult} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport SearchPage from './features/search/SearchPage';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SearchPage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport historyReducer from '../features/search/HistorySlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    history: historyReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}